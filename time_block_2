function planMyWeekPlz(){
  // SADNESS Y IT NO WERK
  const MAKE_EVENTS = false; // useful for debugging. 
  const DAILY_DEEP_HOURS = 3;
  const DAILY_FREEFORM_HOURS = 2;
  const DAILY_LEARNING_HOURS = 1;
  const MIN_BREAK = 1;
  const COMMUTE_TIME = 0.5;
  const EARLIEST_TIME = 10;
  const LATEST_TIME = 23;
  const FROM_CAL = CalendarApp.getDefaultCalendar();
  const LA_CAL = CalendarApp.getCalendarsByName("Liranita")[0];
  const TO_CAL = CalendarApp.getCalendarsByName("Time Blocks")[0];
  var deep_hrs_so_far = 0;
  var freeform_hrs_so_far = 0;
  var learning_hrs_so_far = 0;
  
  var scheduled_event_hrs = 0; //meetings, experiments, etc I already scheduled. 
  
  Logger.log("Remember: for each active project, click title at top then export time tracking as CSV.")
  Logger.log("Open jupyter notebook at C:\\Users\\Anita\\OneDrive - Duke University\\Desktop\\Duke\\ProDev Stuff\\Time Reports")
  Logger.log("jupyter nbconvert --no-input --to html Time_Report_Template.ipynb")
  var rn = new Date();
  day_of_week = rn.getDay();
  while (day_of_week > 0){ //until sunday 
      rn.setDate(rn.getDate() + 1);
      day_of_week = rn.getDay();
  }
  while (day_of_week < 2){  //until but not including Saturday
  //todo change back to 6. 
      stillneed = [true, true, true]; //order: deep, freeform, learning
      rn.setHours(EARLIEST_TIME, 0, 0);
      var elist_day = FROM_CAL.getEventsForDay(rn);
      elist_day = elist_day.concat(LA_CAL.getEventsForDay(rn));
      elist_day.sort((a, b) => {return a.getStartTime() - b.getStartTime()});
      for (i = 0; i < elist_day.length; i++){
        var e = elist_day[i];
      //  Logger.log("curr event: " + e.getTitle())
        if (e.isAllDayEvent()){
        //  Logger.log("is all day event!")
          continue //ignore all day events. 
        }
        c = e.getColor(); //Peacock is 7, Lavendar is 1, light green is default. 
        if (c != 1 && e.getOriginalCalendarId() != "cgcr94hh6jmvhca0161ikon0mg@group.calendar.google.com"){ 
          //Total scheduled work event hours is everything that is not lavendar and not Liranita.
            scheduled_event_hrs += e.getEndTime().getHours() - e.getStartTime().getHours()
          //  Logger.log("is scheduled work event!")
          }
        }
        var hrs_free_rn = (e.getStartTime() - rn) / 36e5;
        var meh = e.getTitle() //for debugging.
       // Logger.log("We can haz " + hrs_free_rn + " hours before " + e.getTitle())
        if (isNaN(hrs_free_rn)) {
       //   Logger.log("Encountered a problem with an Invalid Date or something =(")
        }
        if (c==7){ //account for commute to blue events. 
          hrs_free_rn -= COMMUTE_TIME;
        }
        var new_now = e.getEndTime();
        if (c==7){ //account for commute to blue events. 
          new_now.setTime(e.getEndTime().getTime() + COMMUTE_TIME*60*60*1000)
        }
        if (hrs_free_rn < 0){ // ignore morning calendar events..
        //  Logger.log("<0 hr available before " + e.getTitle())
          if (new_now > rn){ //deal with long events / starting early 
            rn = new_now;
          }
          continue;
        } else if (hrs_free_rn < 1){
       //   Logger.log("<1 hr available before " + e.getTitle())
          rn = new_now;
          continue;
        } else {
          if (hrs_free_rn >= DAILY_DEEP_HOURS && stillneed[0]) {
            var et = new Date(rn.getTime());
            et.setTime(rn.getTime() + DAILY_DEEP_HOURS*60*60*1000);
            if (MAKE_EVENTS){
              TO_CAL.createEvent("Deep Play", rn, et).addPopupReminder(2); 
            }
            stillneed[0] = false;
            deep_hrs_so_far += DAILY_DEEP_HOURS;
            rn.setTime(et.getTime() + MIN_BREAK*60*60*1000); 
            hrs_free_rn = hrs_free_rn - DAILY_DEEP_HOURS;
          }
          if (hrs_free_rn >= DAILY_FREEFORM_HOURS && stillneed[1]) {
            var et = new Date(rn.getTime());;
            et.setTime(rn.getTime() + DAILY_FREEFORM_HOURS*60*60*1000);
            if (MAKE_EVENTS){
              TO_CAL.createEvent("Freeform Play", rn, et).addPopupReminder(2); 
            }
            stillneed[1] = false;
            freeform_hrs_so_far += DAILY_FREEFORM_HOURS;
            rn.setTime(et.getTime() + MIN_BREAK*60*60*1000); 
            hrs_free_rn = hrs_free_rn - DAILY_FREEFORM_HOURS;
          }
          if (hrs_free_rn >= DAILY_LEARNING_HOURS && stillneed[2]) {
            var et = new Date(rn.getTime());;
            et.setTime(rn.getTime() + DAILY_LEARNING_HOURS*60*60*1000);
            if (MAKE_EVENTS){
              TO_CAL.createEvent("Reading/Learning", rn, et).addPopupReminder(2);  
            }
            stillneed[2] = false;
            learning_hrs_so_far += DAILY_LEARNING_HOURS;
            rn.setTime(et.getTime() + MIN_BREAK*60*60*1000); 
            hrs_free_rn = hrs_free_rn - DAILY_LEARNING_HOURS;
          }
          rn = new_now;
        }
      eod = rn 
      eod.setHours(LATEST_TIME, 0, 0)
      var hrs_free_rn = (eod - rn) / 36e5;
      if (hrs_free_rn >= DAILY_DEEP_HOURS && stillneed[0]) {
        var et = new Date(rn.getTime());;
        et.setTime(rn.getTime() + DAILY_DEEP_HOURS*60*60*1000);
        if (MAKE_EVENTS){
          TO_CAL.createEvent("Deep Play", rn, et).addPopupReminder(2); 
        }
        stillneed[0] = false;
        deep_hrs_so_far += DAILY_DEEP_HOURS;
        rn.setTime(et.getTime() + MIN_BREAK*60*60*1000); 
        hrs_free_rn = hrs_free_rn - DAILY_DEEP_HOURS;
      }
      if (hrs_free_rn >= DAILY_FREEFORM_HOURS && stillneed[1]) {
        var et = new Date(rn.getTime());;
        et.setTime(rn.getTime() + DAILY_FREEFORM_HOURS*60*60*1000);
        if (MAKE_EVENTS){
          TO_CAL.createEvent("Freeform Play", rn, et).addPopupReminder(2); 
        }
        stillneed[1] = false;
        freeform_hrs_so_far += DAILY_FREEFORM_HOURS;
        rn.setTime(et.getTime() + MIN_BREAK*60*60*1000); 
        hrs_free_rn = hrs_free_rn - DAILY_FREEFORM_HOURS;
      }
      if (hrs_free_rn >= DAILY_LEARNING_HOURS && stillneed[2]) {
        var et = new Date(rn.getTime());;
        et.setTime(rn.getTime() + DAILY_LEARNING_HOURS*60*60*1000);
        if (MAKE_EVENTS){
          TO_CAL.createEvent("Reading/Learning", rn, et).addPopupReminder(2);  
        }
        stillneed[2] = false;
        learning_hrs_so_far += DAILY_LEARNING_HOURS;
        rn.setTime(et.getTime() + MIN_BREAK*60*60*1000); 
        hrs_free_rn = hrs_free_rn - DAILY_LEARNING_HOURS;
      }
      rn.setDate(rn.getDate() + 1);
      day_of_week = rn.getDay();
  }
  var sm = scheduled_event_hrs + deep_hrs_so_far + freeform_hrs_so_far + learning_hrs_so_far;
  Logger.log("Total hours for this coming week:" + sm)
  Logger.log("Total event hours this week: " + scheduled_event_hrs)
  Logger.log("Total deep hours this week: " + deep_hrs_so_far)
  Logger.log("Total freeform hours this week: " + freeform_hrs_so_far)
  Logger.log("Total learning hours this week: " + learning_hrs_so_far)

}





