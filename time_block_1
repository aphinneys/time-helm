function planMyWeekPlease(){
  const MAKE_EVENTS = true; // useful for debugging. 
  const TOTAL_PLAY_HRS = 18; //was 35
  const MAX_LEARNING_HRS = 10; //learning time! leave..
  const TOTAL_ADMIN_HRS = 12;
  //const MIN_BREAK = 2;
  const MAX_PLAY_BLOCK = 4;  //deep play, was 7
  const ADMIN_BLOCK_LENGTH = 2; //freeform play. was 1. 
 // const MAX_CONSEC_HRS = 7;
  const COMMUTE_TIME = 0.5;
  const EARLIEST_TIME = 10;
  const LATEST_TIME = 23;
  const FROM_CAL = CalendarApp.getDefaultCalendar();
  const LA_CAL = CalendarApp.getCalendarsByName("Liranita")[0];
  const TO_CAL = CalendarApp.getCalendarsByName("Time Blocks")[0];
  var play_hrs_so_far = 0;
  var learning_hrs_so_far = 0;
  var admin_hrs_so_far = 0;
  var total_meeting_hrs = 0;
  //someday, auto-schedule experiments too! but not yet. call them "Experiment."
  //later one admin per day

  Logger.log("Remember: for each active project, click title at top then export time tracking as CSV.")
  Logger.log("Open jupyter notebook at C:\\Users\\Anita\\OneDrive - Duke University\\Desktop\\Duke\\ProDev Stuff\\Time Reports")
  Logger.log("Step 3. Profit.")
  Logger.log("jupyter nbconvert --no-input --to html Time_Report_Template.ipynb")
  // FIRST: create a dictionary: keys are start times, values are hours available.
  var rn = new Date();
  day_of_week = rn.getDay();
  while (day_of_week > 0){ //until sunday 
      rn.setDate(rn.getDate() + 1);
      day_of_week = rn.getDay();
  }
  var free_time = {}
  while (day_of_week < 6){  //until but not including Saturday
      rn.setHours(EARLIEST_TIME, 0, 0);
      var elist_day = FROM_CAL.getEventsForDay(rn);
      elist_day = elist_day.concat(LA_CAL.getEventsForDay(rn));
      elist_day.sort((a, b) => {return a.getStartTime() - b.getStartTime()});
      for (i = 0; i < elist_day.length; i++){
        var e = elist_day[i];
        if (e.isAllDayEvent()){
          continue //ignore all day events. 
        }
        c = e.getColor(); //Peacock is 7, Lavendar is 1, light green is default. 
        if (c != 1 && e.getOriginalCalendarId() != "cgcr94hh6jmvhca0161ikon0mg@group.calendar.google.com"){ 
          //Total meeting hours is everything that is not lavendar and not Liranita, EXCEPT experiments. 
          if (e.getTitle() == "Experiment"){
            play_hrs_so_far += e.getEndTime().getHours() - e.getStartTime().getHours()
          } else {
            total_meeting_hrs += e.getEndTime().getHours() - e.getStartTime().getHours()
          }
        }
        var hrs_free_rn = (e.getStartTime() - rn) / 36e5;
        //Logger.log(rn + hrs_free_rn) //debug
        if (isNaN(hrs_free_rn)) {
          Logger.log("Encountered a problem with an Invalid Date or something =(")
        }
        if (c==7){ //account for commute to blue events. 
          hrs_free_rn -= COMMUTE_TIME;
        }
       // Logger.log(hrs_free_rn)
        var new_now = e.getEndTime();
        if (c==7){ //account for commute to blue events. 
          new_now.setTime(e.getEndTime().getTime() + COMMUTE_TIME*60*60*1000)
        }
        if (hrs_free_rn < 0){ // ignore morning calendar events..
            if (new_now > rn){ //deal with long events / starting early 
              rn = new_now;
            }
            continue;
        } else if (hrs_free_rn < 1){
          rn = new_now;
          continue;
        } else {
          free_time[rn] = hrs_free_rn
          rn = new_now;
        }
      }
      eod = rn 
      eod.setHours(LATEST_TIME, 0, 0)
      var hrs_free_rn = (eod - rn) / 36e5;
      if (hrs_free_rn >= 1){
          free_time[rn] = hrs_free_rn
        }
      rn.setDate(rn.getDate() + 1);
      day_of_week = rn.getDay();
  }
  Logger.log("Total meeting hours this week: " + total_meeting_hrs)
  Logger.log(free_time) //TODO troubleshoot from blerp calendar hi. 

  // SECOND, schedule blocks. 

 // Logger.log("free time type " + typeof(free_time));
  //https://stackoverflow.com/questions/25500316/sort-a-dictionary-by-value-in-javascript
  var remain_free = Object.keys(free_time).map(function(k) {return [k, free_time[k]]; });
  remain_free.sort(function(a, b) {return b[1] - a[1];});
 // Logger.log(remain_free.toString());
 // Logger.log("remaining time type " + typeof(remain_free[0][0]));
  var i = 0;
  while (play_hrs_so_far < TOTAL_PLAY_HRS){
    var curr_avail = remain_free[i];
    var duration = Math.min(curr_avail[1], MAX_PLAY_BLOCK)
    if (play_hrs_so_far + duration > TOTAL_PLAY_HRS){
      duration = TOTAL_PLAY_HRS - play_hrs_so_far;
    }
    var st_str = curr_avail[0];
   // Logger.log("st is " + st);
    var st = new Date(st_str);
   // Logger.log("std is " + std);
    var et = new Date(st_str);
    et.setTime(st.getTime() + duration*60*60*1000);
  //  Logger.log("et is " + et)
    if ((curr_avail[1] - duration) >= 1){
      remain_free[i] = [et, curr_avail[1] - duration];
    } else {
      remain_free[i] = [st, 0];
    }
    if (MAKE_EVENTS){
      TO_CAL.createEvent("Play block", st, et).addPopupReminder(2);  //add it to calendar
    }
    play_hrs_so_far += duration;
    i += 1;
   // Logger.log("play hrs so far: " + play_hrs_so_far);
  }
  //Logger.log(remain_free.toString());
  remain_free.sort(function(a, b) {return a[1] - b[1];}); // sort, this time smallest first!
  //Logger.log(remain_free.toString());
  for (i = 0; i < remain_free.length; i++){
    var curr_avail = remain_free[i];
    if (curr_avail[1] < ADMIN_BLOCK_LENGTH) {
      continue
    }
    var st_str = curr_avail[0];
    var st = new Date(st_str);
    var et = new Date(st_str);
    et.setTime(st.getTime() + ADMIN_BLOCK_LENGTH*60*60*1000);
    if ((curr_avail[1] - duration) >= 1){
      remain_free[i] = [et, curr_avail[1] - ADMIN_BLOCK_LENGTH];
    } else {
      remain_free[i] = [st, 0];
    }
    if (MAKE_EVENTS){
      TO_CAL.createEvent("Light admin block", st, et).addPopupReminder(2); 
    }
    admin_hrs_so_far += ADMIN_BLOCK_LENGTH;
    if (admin_hrs_so_far == TOTAL_ADMIN_HRS){
      break;
    }
  }
  remain_free.sort(function(a, b) {return b[1] - a[1];}); // sort again!
  if (total_meeting_hrs < MAX_LEARNING_HRS){
    learning_hrs_so_far = total_meeting_hrs; // count meetings towards learning/reading.
    var i = 0;
    while (learning_hrs_so_far < MAX_LEARNING_HRS){
      var curr_avail = remain_free[i];
      var duration = Math.min(curr_avail[1], MAX_LEARNING_BLOCK)
      if (learning_hrs_so_far + duration > MAX_LEARNING_HRS){
        duration = MAX_LEARNING_HRS - learning_hrs_so_far;
      }
      var st_str = curr_avail[0];
      var st = new Date(st_str);
      var et = new Date(st_str);
      et.setTime(st.getTime() + duration*60*60*1000);
      if (MAKE_EVENTS){
        TO_CAL.createEvent("Reading/learning block", st, et).addPopupReminder(2);  //add it to calendar
      }
      learning_hrs_so_far += duration;
      i += 1;
    }
  }
}











